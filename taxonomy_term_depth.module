<?php
/**
 * @file
 * Provides some custom functionality.
 */

/**
 * Require all constants
 */
require_once __DIR__. '/constants.inc';

/**
 * @todo: Provide description
 * @param $tid
 * @param bool $force
 * @return int
 */
function taxonomy_term_depth_get_by_tid($tid, $force = FALSE) {
  $cache = &drupal_static('taxonomy_term_depth', array());
  $cache_key = $tid;
  if ($force || !isset($cache[$cache_key])) {
    // Try to get cached value first but only if no need to rebuild
    // If force flag is set to TRUE the query won't be executed
    if ($force || !($depth = Drupal::database()->query('SELECT depth FROM {taxonomy_term_field_data} WHERE tid=:tid', array(':tid' => $tid))->fetchField())) {
      // Calculate value without using caches
      $depth = _taxonomy_term_depth_get_nocache($tid);

      // And write to database cache
      Drupal::database()->update('taxonomy_term_field_data')
        ->fields(array(
          'depth' => $depth,
        ))
        ->condition('tid', $tid)
        ->execute();
    }

    $cache[$cache_key] = $depth;
  }

  return $cache[$cache_key];
}

/**
 * Implements hook_entity_update();
 */
function taxonomy_term_depth_entity_update($entity) {
  // Update depth of the item on save
  if ($entity->getEntityTypeId() == 'taxonomy_term') {
    taxonomy_term_depth_get_by_tid($entity->id(), TRUE);
  }
}

/**
 * Implements hook_entity_insert()
 */
function taxonomy_term_depth_entity_insert($entity) {
  taxonomy_term_depth_entity_update($entity);
}

/**
 * Calculates taxonomy term depth from database
 * @param $tid
 * @return int
 */
function _taxonomy_term_depth_get_nocache($tid) {
  $parent = taxonomy_term_depth_get_parent($tid);
  if (!$parent) {
    return 1;
  }
  else {
    return 1 + _taxonomy_term_depth_get_nocache($parent);
  }
}

/**
 * Gets parent of the term
 * @param $tid
 *  Term tid to find its parent
 */
function taxonomy_term_depth_get_parent($tid, $nocache = FALSE) {
  $cache = &drupal_static(__FUNCTION__, array());
  $cache_key = $tid;
  if (!isset($cache[$cache_key]) || $nocache) {
    $cache[$cache_key] = Drupal::database()->query(
      "SELECT parent FROM {taxonomy_term_hierarchy} WHERE tid = :tid",
      array(':tid' => $tid)
    )->fetchField();
  }

  return $cache[$cache_key];
}

/**
 * @param $tid
 * @return array
 */
function taxonomy_term_depth_get_chain($tid, $reveresed = FALSE) {
  // @todo: Caching parents or not worth?
  $parents = array();
  $parent = $tid;
  while ($parent = taxonomy_term_depth_get_parent($parent)) {
    $parents[] = $parent;
  }

  return $reveresed ? array_reverse($parents) : $parents;
}

/**
 * Implements hook_views_api().
 */
function taxonomy_term_depth_views_api() {
  return array(
    'api' => 3,
  );
}

/**
 * Implements hook_views_data_alter().
 */
function taxonomy_term_depth_views_data_alter(array &$data) {
  $data['taxonomy_term_field_data']['depth'] = array(
    'title' => t('Depth'),
    'group' => t('Taxonomy term'),
    'help' => t('Add depth value to sort and filter.'),
    'field' => array(
      'id' => 'numeric',
    ),
    'sort' => array(
      'id' => 'standard',
    ),
    'filter' => array(
      'help' => t('Filter by the depth value.'),
      'id' => 'numeric',
    ),
  );
  return $data;
}
